/*
	Dependencies:
	#define USE_EVENTS
	#include "got/_core.lsl"

	// NPC Config defaults:
	#define cf$FLAGS 0
	#define cf$SPEED 1
	#define cf$HITBOX 0
	#define cf$ATKSPEED 2
	#define cf$DMG 4
	#define cf$WANDER 0
	#define cf$HP 100
	#define cf$AGGRO_RANGE 15
	#define cf$SOUND_AGGRO ""
	#define cf$SOUND_AGGRO_LOST ""
	#define cf$SOUND_TAKEHIT ""	(Can be a JSON array also)
	#define cf$SOUND_ATTACK "" (Can also be array)
	#define cf$SOUND_DEATH ""
	#define cf$ICON ""
	#define cf$SCENE_ALIAS "" (Use if you want to use a different name for punishments, ex "Cock Goblin" for a Cock Goblin Flailer
	#define cf$DROPS "" (JSON array of [[(str)item, (float)chance]...]
	#define cf$TEAM 0 (Default team, can be overridden)
	#define cf$RANGE_ADD 0	(How far away a player can hit this, but not vice versa. Good for large bosses)
	#define cf$HEIGHT_ADD 0 (Used for calculating line of sight, mostly used for very large bosses)
	#define cf$MELEE_HEIGHT 0 (Used for roleplay. 0 = groin level, 1 = chest level, -1 = anything else)
	#define cf$HOVER_HEIGHT 0 (Used for levitating monsters and animesh. Offsets the bottom of the monster)
	#define cf$APTITUDE 1
	#define cf$SEX 0 (sex flags)

	// FX KEEPALIVE
	#define cf$FX_KEEPALIVE ["Prim"]		// Keeps spawning temporary prims if they despawn. Useful for visual effects that should be precached for speed
	#define cf$FX_KEEPALIVE_NO_AUTO_KILL 	// Disables auto kill of keepalive when this NPC dies
	
	
	Events (these are preprocessor macros:
	#define onInit( int live ) | Raised on state entry and when portal initializes
	#define onSpellSetup() | Add spells. Use:
		LocalConf$npc$addSpell( int flags, float casttime, float recast, float range, string name, float minrange, int targSex, int targFX, int targStatusFlags, int viableRoles, float radius);
	#define onAggroChange( key pre, key new ) | Aggro has changed
	#define onDeath() | NPC has died

	#define onSpellStart( str spell, key targ )
	#define onSpellInterrupt( str spell, key targ )
	#define onSpellFinish( str spell, key targ )
	#define timerEvt( str id, str data )
	#define onEvent(string script, integer evt, list data)
	#define afterEvent(string script, integer evt, list data)
	#define onCallback(str sender_script, int method, list params, string CB, key id)	// Callback received
	#define onInternalMethod( sender_script, method, params, id ) list onInternalMethod( str sender_script, int method, list params, key id )		// Internal method received
	#define onMethod( str sender_script, int method, list params, key id )				// Any method received
	#define onObjectRez( key id )
	#define onDamaged( float hp, key id )
	#define onHitfx() // Raised when an fx object of type fx$HITFX is received
	#define onRunTimePermissions( int perms )
	#define int onCheckCastSpell( key victim, str spellName )
	#define onListen(integer chan, string name, key id, string message)
	
	
	#define body // put into default

	Globals:
	PLAYERS | list | List of player UUIDs
	PLAYER_HUDS | list | List of player HUDs corresponding to above players
	TEAM | int | Player team
	SPELLS | list | List of spells
	AGGRO | key | Currently aggroed player
	P_FX | int | (Optional) Searches for a prim named "FX" and maps that to global P_FX. Requires #define FX_PRIM

	
	-- GRAPPLES --
	
	To use grapples, add the got MonsterGrapple script to the monster inventory and then use the following:
	#define USE_DB4 at the top of your script
	
	-- Allow this NPC to start grapples --
	#define cf$GRAPPLE_FLAGS				// int - Grapple settings flags. These are the flags used by got Evts quick time events to set things like left/right events.
	#define cf$GRAPPLE_DURATION				// float - Grapple max duration = 300. Max duration before force releasing the players.
	#define cf$GRAPPLE_PREDELAY				// float - Grapple predelay = 0. Time before starting the QTE after grapple starts.
	#define cf$GRAPPLE_BUTTON_DELAY			// float - Grapple button delay = 0. Used in normal QTEs to set a delay before buttons.
	#define cf$GRAPPLE_STAGES				// int - QTE stages, alternatively speed for quick grapples. = 30
	#define cf$GRAPPLE_MONSTERFLAGS			// int - Monster to set when grapple starts and unset when it ends = Monster$RF_IMMOBILE|Monster$RF_PACIFIED|Monster$RF_NOROT|Monster$RF_NO_SPELLS
	#define cf$GRAPPLE_STRIP 				// bool  - Strip clothes during the grapple
	#define cf$GRAPPLE_NO_QTE				// bool - No QTE. call grappleEnd manually
	#define cf$GRAPPLE_FAIL_TIMEOUT			// float - On failable grapples, wait this long before unsitting the player.
	
	#define grappleOnStart()									// A grapple has been started but players may not be seated. You may use this to turn off custom NPC logic.
	#define	grappleOnSeated()									// All players are seated. You can now trigger animations! Get the players with gotMonsterGrapple$getTargs()
	#define grappleOnEnd()					
	#define grappleOnQteFinish(bool success)					// 
	#define grappleOnButton(key victim_hud, bool success)		// Used a classic QTE and the player hit a button
	#define grappleOnClientAnim(str npcAnim, list playerAnims)	// Raised when client triggers an animation on the host. Raised on both host and client.
	
	-- Allow this NPC to host hookup grapples (where other NPCs join this NPC) --
	#define cf$hup$HOST (str)hostName 		// When defined, the NPC will announce its presence for other NPCs to join, using this hostname for an identifier. The client controls the animations.
	
	-- Allow this NPC to hook up to hookup hosts (joining another NPC that has grappled somebody) --
	Call the following function from your LocalConf onInit function for each client pose that you want to add.
	cf$hup$addClientPose( string hostName, vector posOffs, rotation rotOffs, (str)myIdleAnim, (str/arr)pcIdleAnim, (str)hostIdleAnim, (float)resync_time, (vec)camPos, (vec)camTarg, (int)nrVictims, (list)conditions) - Allows us to be the client in a hookup animation.
		hostName = hostName of host that this animation is valid for
		posOffs = position offset relative to host position and rotation
		rotOffs = rotation offset relative to host rotation
		myIdleAnim = idle animation loop for the client
		pcIdleAnim = idle animation(s) for the player(s) we are double teaming
		hostIdleAnim = idle animation loop for the host
		resync = Used if you want to reuse the currently playing host/player idle animation. Stops animations and delays for resync seconds.
		camPos = Camera position relative to host. use ZERO_VECTOR to ignore
		camTarg = Camera target relative to host
		nrVictims = Nr of player victims needed for this pose. Default 1
		conditions = List of conditions. See got MonsterGrapple gotMonsterGrappleHupCond

	-- Used in both client and host hookups --
	#define grappleOnHookup(str hostname)						// Raised when a hookup starts. If hostname is empty we are hosting. Otherwise it is the hostname of the host.
	#define grappleOnHupClientTest( poseIndexes ) list grappleOnHupClientTest( list poseIndexes )	// Needed if you want to check custom conditions such as gender. poseIndexes are indexes from gotTable$monsterGrappleHup to check. Should return a list of viable indexes. You can use gotMonsterGrapple$getTargs() to get a list of the HUD(s).
	#define grappleOnHupClientReq() 							// Raised when we try to hookup to a host (we may not succeed)
 
	// Helpful methods from got MonsterGrapple
	gotMonsterGrapple$isDebug() - Helper method that checks if grapple is in a debug state or live.
	gotMonsterGrapple$getTargs() - Gets a list of players involved in the grapple
	gotMonsterGrapple$getHupTarg() - Gets the other NPC involved in the grapple
	gotMonsterGrapple$getHupName() - Gets the hostname of the hookup
	gotMonsterGrapple$getAnimNPC() - Gets the idle NPC anim name
	gotMonsterGrapple$getAnimPC() - Gets a list of idle PC anim names
	
	To send a non-looping anim from client to host you can use the macro:
	gotMonsterGrapple$hostAnim(playerAnim, hostAnim)
	
	You can use lazyAnim(key targ, string anim, bool start) to trigger animations on players without needing to request permissions. 
	lazyAnim checks permissions and whether the player exists or not automatically
	You can also use lazyCam(key targ, vector camPos, vector targPos)
	
	gotMonsterGrapple$firstPlayer() can be used to quickly get the first grappled player
	
	To test a grapple you can use the debug command:
	debug got MonsterGrapple, 2, <HUD_UUID>
	
	To test conal in front:
	debug got MonsterGrapple, 1, 1.6, 5, 0, <minPlayers>, <maxPlayers>, 1
	debug got MonsterGrapple, 1, 1.6, 3, 0, 2,2, 1
	
	
*/



// timerEvent was renamed timerEvt in the template. This warns for any legacy scripts
#ifdef timerEvent
	#error "Use #define timerEvt instead of timerEvent"
#endif



// Setup defaults
#ifndef cf$FLAGS
	#define cf$FLAGS 0
#endif
#ifndef cf$SPEED
	#define cf$SPEED 1
#endif
#ifndef cf$HITBOX
	#define cf$HITBOX 0
#endif
#ifndef cf$ATKSPEED
	#define cf$ATKSPEED 2
#endif
#ifndef cf$DMG
	#define cf$DMG 4
#endif
#ifndef cf$WANDER
	#define cf$WANDER 0
#endif
#ifndef cf$HP
	#define cf$HP 100
#endif
#ifndef cf$AGGRO_RANGE
	#define cf$AGGRO_RANGE 15
#endif
#ifndef cf$SOUND_AGGRO
	#define cf$SOUND_AGGRO ""
#endif
#ifndef cf$SOUND_AGGRO_LOST
	#define cf$SOUND_AGGRO_LOST ""
#endif
#ifndef cf$SOUND_TAKEHIT
	#define cf$SOUND_TAKEHIT ""
#endif
#ifndef cf$SOUND_ATTACK
	#define cf$SOUND_ATTACK ""
#endif
#ifndef cf$SOUND_DEATH
	#define cf$SOUND_DEATH ""
#endif
#ifndef cf$ICON
	#define cf$ICON ""
#endif
#ifndef cf$SCENE_ALIAS
	#define cf$SCENE_ALIAS ""
#endif
#ifndef cf$DROPS
	#define cf$DROPS ""
#endif
#ifndef cf$TEAM
	#define cf$TEAM 0
#endif
#ifndef cf$RANGE_ADD
	#define cf$RANGE_ADD 0
#endif
#ifndef cf$HEIGHT_ADD
	#define cf$HEIGHT_ADD 0
#endif
#ifndef cf$MELEE_HEIGHT
	#define cf$MELEE_HEIGHT -1
#endif
#ifndef cf$HOVER_HEIGHT
	#define cf$HOVER_HEIGHT 0
#endif
#ifndef cf$APTITUDE
	#define cf$APTITUDE 3.0
#endif
#ifndef cf$SEX
	#define cf$SEX 0
#endif
// Needed for defaults
#ifndef cf$GRAPPLE_FLAGS
	#define cf$GRAPPLE_FLAGS (Evts$qFlags$LR|Evts$qFlags$LR_CAN_FAIL)
#endif


#ifdef cf$FX_KEEPALIVE
	#ifndef onObjectRez
		// Must enable onObjectRez if not already
		#define onObjectRez(id)
	#endif
	list KEEPALIVE;
	list KEEPALIVE_PRIMS;
#endif


#define llStartAnimation #error "Use lazyAnim(key targ, string anim, bool start)"

// Legacy unsupported functionality
#ifdef cf$sitCheck 
    #error "cf$sitCheck needs to be implemented" 
#endif
#ifdef grappleOnPermissions
	#error "grappleOnPermissions not implemented. Consider using grappleOnSeated()." 
#endif
#ifdef onRunTimePermissions 
    #error "onRunTimePermissions not implemented" 
#endif
#ifdef cf$ALLOW_DIRECT_ANIMATIONS 
    #error "cf$ALLOW_DIRECT_ANIMATIONS not implemented" 
#endif
#ifdef hup$testClient
	#error "hup$testClient not yet implemented"
#endif
#ifdef hup$IGNORE_Z
	#error "ignoreZ is now on pose by pose basis, use "
#endif
#ifdef hup$onPreAccept
	#error "hup$onPreAccept not implemented"
#endif
#ifdef cf$hup$CLIENT
	#error "cf$hup$CLIENT has been removed. Use cf$hup$addClientPose in your init code"
#endif
#ifdef grappleOnFail
	#error "Use grappleOnQteFinish(bool success) instead of grappleOnFail"
#endif
#ifdef hup$testClient
	#error "hup$testClient was removed. Use grappleOnHupClientTest"
#endif
#define hup$clientAnim() #error "hup$clientAnim was removed. use gotMonsterGrapple$hostAnim instead"



int BFR;	// Bitflags runtime. Bitflags handled by this template.
int BFL;
integer TEAM;
list SPELLS = [];
int DEAD;
key AGGRO;
float HP = 1.0;
#ifdef FX_PRIM
	int P_FX;
#endif
#ifdef FX_PRIM1
	int P_FX1;
#endif
int LIVE;

ini( int live ){

	// Reset all hookups, because they are reset in onInit
	db4$drop(gotTable$monsterGrappleHup);
	
	stopAllObjectAnimations()
	llStopSound();
    integer i;
    for(; i<llGetInventoryNumber(INVENTORY_ANIMATION); ++i){
        string n = llGetInventoryName(INVENTORY_ANIMATION, i);
        if( startsWith(n, "idle") ){
            llStartObjectAnimation(n);
		}
        else
            llStopObjectAnimation(n);
    }

	LIVE = Portal$getLive();
	#ifdef onInit
		onInit(LIVE && live);
	#endif

}

Portal$playerLists
onEvt(string script, integer evt, list data){
	
	#ifdef onEvent
		onEvent( script, evt, data );
	#endif

	Portal$handlePlayers();
    
    if(script == "got Portal" && evt == evt$SCRIPT_INIT){

        ini(TRUE);
        NPCSpells$setSpells(SPELLS);

    }

	if( script == "got Status" ){
		if( evt == StatusEvt$team )
			TEAM = l2i(data, 0);
		
		else if( evt == StatusEvt$monster_hp_perc )
			HP = l2f(data, 0);

		else if( evt == StatusEvt$monster_gotTarget ){

			key pre = AGGRO;
			AGGRO = l2s(data, 0);
			
			if( AGGRO != pre ){
				
				// Optional combat stance
				if( llGetInventoryType("combat") == INVENTORY_ANIMATION ){
					if( AGGRO )
						llStartObjectAnimation("combat");
					else
						llStopObjectAnimation("combat");
				}
				#ifdef onAggroChange
					onAggroChange( pre, AGGRO );
				#endif
			}
			
		
		}
		else if( evt == StatusEvt$dead ){
		
			DEAD = l2i(data, 0);
			if( !DEAD )
				return;
				
			#ifdef onDeath
				onDeath();
			#endif
			#ifndef cf$FX_KEEPALIVE_NO_AUTO_KILL
				LocalConf$killMyKeepalives();
			#endif
			
		}
		#ifdef onDamaged
		else if( evt == StatusEvt$hurt ){
			onDamaged(l2f(data, 0), l2k(data, 1));
		}
		#endif
		
	}
	
		
    #ifdef onHitfx
	if( script == "got NPCInt" && evt == NPCIntEvt$hitfx ){
		onHitfx();
	}
	#endif
	
	else if( script == "got MonsterGrapple" ){
		#ifdef grappleOnHookup
		if( evt == gotMonsterGrappleEvt$hookupStart ){
			grappleOnHookup(l2s(data, 0));
		}
		#endif
		#ifdef grappleOnHupClientReq
		if( evt == gotMonsterGrappleEvt$onHookupClientReq )
			grappleOnHupClientReq();
		#endif
		#ifdef grappleOnStart
		if( evt == gotMonsterGrappleEvt$start ){
			grappleOnStart();
		}
		#endif
		#ifdef grappleOnSeated
		if( evt == gotMonsterGrappleEvt$seated ){
			grappleOnSeated();
		}
		#endif
		#ifdef grappleOnEnd
		if( evt == gotMonsterGrappleEvt$end ){
			grappleOnEnd();
		}
		#endif
		#ifdef grappleOnQteFinish
		if( evt == gotMonsterGrappleEvt$qteComplete ){
			grappleOnQteFinish(l2i(data, 0));
		}
		#endif
		#ifdef grappleOnButton
		if( evt == gotMonsterGrappleEvt$onButton ){
			grappleOnButton(l2k(data, 0), l2i(data, 1));
		}
		#endif
		#ifdef grappleOnClientAnim
		if( evt == gotMonsterGrappleEvt$onClientAnim ){
			grappleOnClientAnim(l2s(data, 0), llJson2List(l2s(data, 1)));
		}
		#endif
		
		
		
	
	}
    
	

	else if( script == "got NPCSpells" ){

		#ifdef onSpellStart
        if( evt == NPCSpellsEvt$SPELL_CAST_START )
            onSpellStart(l2s(data, 3), l2s(data, 2));
		#endif
        #ifdef onSpellFinish
		if( evt == NPCSpellsEvt$SPELL_CAST_FINISH )
            onSpellFinish(l2s(data, 3), l2s(data, 2));
		#endif
		#ifdef onSpellInterrupt
        if( evt == NPCSpellsEvt$SPELL_CAST_INTERRUPT )
            onSpellInterrupt(l2s(data, 3), l2s(data, 2));
		#endif
    }

	#ifdef afterEvent
	afterEvent(script, evt, data);
	#endif

}

timerEvent( string id, string data ){
	
	

	#ifdef cf$FX_KEEPALIVE
	if( id == "_KA" ){
		
		float t = llGetTime();
		integer i;
		for(; i < count(KEEPALIVE); ++i ){
			
			// If the entry is not a float or if it has timed out, then we can check if it exists and try to rez again
			if( llGetListEntryType(KEEPALIVE_PRIMS, i) != TYPE_FLOAT || llGetTime() - l2f(KEEPALIVE_PRIMS, i) > 10.0 ){
				
				// Try a new rez
				if( llKey2Name(l2k(KEEPALIVE_PRIMS, i)) == "" ){
					
					KEEPALIVE_PRIMS = llListReplaceList(KEEPALIVE_PRIMS, (list)llGetTime(), i, i);
					_portal_spawn_v3(
						l2s(KEEPALIVE, i), 
						llGetPos()-<0,0,9>, 
						ZERO_ROTATION, 
						ZERO_VECTOR, 
						FALSE,
						"_KA_",
						llGetKey(),
						"", 
						[]
					); 
					
				}
				
			}
		
		}
	
	}
	#endif
	

	#ifdef timerEvt
	timerEvt(id, data);
	#endif
	
}

default{
    on_rez(integer mew){llResetScript();}
    state_entry(){

        PLAYERS = [(string)llGetOwner()];
		//PLAYER_HUDS = [(key)"2fad5aa7-c2d3-51fd-e1cd-551e2d289fab"];
        memLim(1.5);
		#ifdef onSpellSetup
		onSpellSetup();
		#endif
		#if defined FX_PRIM || defined P_FX1
		integer i;
		for( i = 1; i<= llGetNumberOfPrims(); ++i ){
			str name = llGetLinkName(i);
			if( name == "FX" )
				P_FX = i;
			#if defined P_FX1
			if( name == "FX1" )
				P_FX1 = i;
			#endif
		}
		#endif
		#ifdef cf$FX_KEEPALIVE
			KEEPALIVE = cf$FX_KEEPALIVE;	
			KEEPALIVE_PRIMS = KEEPALIVE;	// Ugly but fast way of making it the same length as keepalive
			llListen(KEEPALIVE_CHAN, "", "", "");
			LocalConf$killMyKeepalives();
			multiTimer(["_KA", 0, 1, TRUE]);	// Keepalive timer
		#endif
				
		// Setup grapple
		#ifdef cf$GRAPPLE_FLAGS
			db4$freplace(gotTable$monsterGrapple, gotTable$monsterGrapple$flags, cf$GRAPPLE_FLAGS);
		#endif
		#ifdef cf$GRAPPLE_PREDELAY
			db4$freplace(gotTable$monsterGrapple, gotTable$monsterGrapple$predelay, cf$GRAPPLE_PREDELAY);
		#endif
		#ifdef cf$GRAPPLE_DURATION
			db4$freplace(gotTable$monsterGrapple, gotTable$monsterGrapple$duration, cf$GRAPPLE_DURATION);
		#endif
		#ifdef cf$GRAPPLE_BUTTON_DELAY
			db4$freplace(gotTable$monsterGrapple, gotTable$monsterGrapple$buttonDelay, cf$GRAPPLE_BUTTON_DELAY);
		#endif
		#ifdef cf$GRAPPLE_STAGES
			db4$freplace(gotTable$monsterGrapple, gotTable$monsterGrapple$stages, cf$GRAPPLE_STAGES);
		#endif
		#ifdef cf$GRAPPLE_MONSTERFLAGS
			db4$freplace(gotTable$monsterGrapple, gotTable$monsterGrapple$monsterFlags, cf$GRAPPLE_MONSTERFLAGS);
		#endif
		#ifdef cf$GRAPPLE_STRIP
			db4$freplace(gotTable$monsterGrapple, gotTable$monsterGrapple$strip, cf$GRAPPLE_STRIP);
		#endif
		#ifdef cf$GRAPPLE_NO_QTE
			db4$freplace(gotTable$monsterGrapple, gotTable$monsterGrapple$noQte, cf$GRAPPLE_NO_QTE);
		#endif
		#ifdef cf$GRAPPLE_FAIL_TIMEOUT
			db4$freplace(gotTable$monsterGrapple, gotTable$monsterGrapple$failTimeout, cf$GRAPPLE_FAIL_TIMEOUT);
		#endif
		#ifdef grappleOnHupClientTest
			db4$freplace(gotTable$monsterGrapple, gotTable$monsterGrapple$needsTest, "1");
		#else
			db4$fdelete(gotTable$monsterGrapple, gotTable$monsterGrapple$needsTest);
		#endif
		
		
		#ifdef cf$hup$HOST
			db4$freplace(gotTable$monsterGrapple, gotTable$monsterGrapple$host, cf$hup$HOST);
		#endif
		
		ini(FALSE);
		
    }

    timer(){ multiTimer([]); }
	
	
	// Run time permissions
	#ifdef onRunTimePermissions
	run_time_permissions( integer perm ){
		
		onRunTimePermissions(perm);
		
	}
	#endif
		
	
	
	#ifdef body
	body
	#endif
	
	#ifdef onObjectRez 
	object_rez( key id ){
		#ifdef cf$FX_KEEPALIVE
			string name = llKey2Name(id);
			integer pos = llListFindList(KEEPALIVE, (list)name);
			if( ~pos ){
				// Kill old
				llRegionSayTo(l2k(KEEPALIVE_PRIMS, pos), KEEPALIVE_CHAN, "KILL");
				KEEPALIVE_PRIMS = llListReplaceList(KEEPALIVE_PRIMS, (list)id, pos, pos);
			}
		#endif
		onObjectRez(id);
	}
	#endif
	
	#ifdef onListen
    listen( integer c, string n, key id, string msg ){
		onListen(c, n, id, msg);
	}
	#endif
	
    #include "xobj_core/_LM.lsl"
    if(method$isCallback){
		#ifdef onCallback
			onCallback(SENDER_SCRIPT, METHOD, PARAMS, CB, id);
		#endif
        return;
	}

    if(method$internal){
		#ifdef onInternalMethod
			CB_DATA = onInternalMethod( SENDER_SCRIPT, METHOD, PARAMS, id );
		#endif
        if(METHOD == LocalConfMethod$ini){
			list INI_DATA = [
				cf$FLAGS,
				cf$SPEED,
				cf$HITBOX,
				cf$ATKSPEED,
				cf$DMG,
				cf$WANDER,
				cf$HP,
				cf$AGGRO_RANGE,
				cf$SOUND_AGGRO,
				cf$SOUND_AGGRO_LOST,
				cf$SOUND_TAKEHIT,
				cf$SOUND_ATTACK,
				cf$SOUND_DEATH,
				cf$ICON,
				cf$SCENE_ALIAS,
				cf$DROPS,
				cf$TEAM,
				cf$RANGE_ADD,
				cf$HEIGHT_ADD,
				cf$MELEE_HEIGHT,
				cf$HOVER_HEIGHT,
				cf$APTITUDE,
				cf$SEX
			];
            raiseEvent(LocalConfEvt$iniData, mkarr(INI_DATA));
		}
		
		#ifdef onCheckCastSpell
		if( METHOD == LocalConfMethod$checkCastSpell )
			CB_DATA = (list)onCheckCastSpell( method_arg(1), method_arg(2) );
		#endif
		
    }
	
	#ifdef grappleOnHupClientTest
	if( method$internal && METHOD == LocalConfMethod$canHookup ){
		gotMonsterGrapple$hup$viablePoses(
			grappleOnHupClientTest(llJson2List(method_arg(0)))
		);
	}
	#endif
	
	// Legacy code
	if( method$byOwner && METHOD == LocalConfMethod$grappleEnable )
		gotMonsterGrapple$enable(LINK_THIS, (int)method_arg(0));

	if( METHOD == LocalConfMethod$grapple ){
		gotMonsterGrapple$start(LINK_THIS, llJson2List(method_arg(0)), (int)method_arg(1), (int)method_arg(2));
	}


	#ifdef onMethod
		onMethod( SENDER_SCRIPT, METHOD, PARAMS, id );
	#endif

    #define LM_BOTTOM
    #include "xobj_core/_LM.lsl"
}
