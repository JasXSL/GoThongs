/*
	Dependencies:
	#define USE_EVENTS
	#include "got/_core.lsl"

	// NPC Config defaults:
	#define cf$FLAGS 0
	#define cf$SPEED 1
	#define cf$HITBOX 0
	#define cf$ATKSPEED 2
	#define cf$DMG 4
	#define cf$WANDER 0
	#define cf$HP 100
	#define cf$AGGRO_RANGE 15
	#define cf$SOUND_AGGRO ""
	#define cf$SOUND_AGGRO_LOST ""
	#define cf$SOUND_TAKEHIT ""	(Can be a JSON array also)
	#define cf$SOUND_ATTACK "" (Can also be array)
	#define cf$SOUND_DEATH ""
	#define cf$ICON ""
	#define cf$SCENE_ALIAS "" (Use if you want to use a different name for punishments, ex "Cock Goblin" for a Cock Goblin Flailer
	#define cf$DROPS "" (JSON array of [[(str)item, (float)chance]...]
	#define cf$TEAM 0 (Default team, can be overridden)
	#define cf$RANGE_ADD 0	(How far away a player can hit this, but not vice versa. Good for large bosses)
	#define cf$HEIGHT_ADD 0 (Used for calculating line of sight, mostly used for very large bosses)
	#define cf$MELEE_HEIGHT 0 (Used for roleplay. 0 = groin level, 1 = chest level, -1 = anything else)
	#define cf$HOVER_HEIGHT 0 (Used for levitating monsters and animesh. Offsets the bottom of the monster)
	#define cf$APTITUDE 1
	#define cf$SEX 0 (sex flags)
	
	#define cf$sitCheck(targ) - Return true/false if the seated player was accepted. Lets you overwrite the default check.
	
	#define cf$USE_GRAPPLE	(Enables the grapple functions)
	#define cf$GRAPPLE_FLAGS				// Grapple settings flags = left/right failable
	#define cf$GRAPPLE_DURATION				// Grapple max duration = 300
	#define cf$GRAPPLE_PREDELAY				// Grapple predelay = 0
	#define cf$GRAPPLE_BUTTON_DELAY			// Grapple button delay = 0
	#define cf$GRAPPLE_STAGES				// QTE stages, alternatively speed for quick grapples. = 30
	#define cf$GRAPPLE_MONSTERFLAGS			// Flags to set when grapple starts and unset when it ends = Monster$RF_IMMOBILE|Monster$RF_PACIFIED|Monster$RF_NOROT|Monster$RF_NO_SPELLS
	
	#define cf$DUMMY_MODE	// Enables dummy mode where you can sit on it
	

	Events (these are preprocessor macros:
	#define onInit( int live ) | Raised on state entry and when portal initializes
	#define onSpellSetup() | Add spells. Use:
		LocalConf$npc$addSpell( int flags, float casttime, float recast, float range, string name, float minrange, int targSex, int targFX, int targStatusFlags, int viableRoles, float radius);
	#define onAggroChange( key pre, key new ) | Aggro has changed
	#define onDeath() | NPC has died

	#define onSpellStart( str spell, key targ )
	#define onSpellInterrupt( str spell, key targ )
	#define onSpellFinish( str spell, key targ )
	#define timerEvent( str id, str data )
	#define onEvent(string script, integer evt, list data)
	#define afterEvent(string script, integer evt, list data)
	#define onCallback(str sender_script, int method, list params, string CB, key id)	// Callback received
	#define onInternalMethod( sender_script, method, params, id ) list onInternalMethod( str sender_script, int method, list params, key id )		// Internal method received
	#define onMethod( str sender_script, int method, list params, key id )				// Any method received
	#define int onCheckCastSpell( key victim, str spellName )
	
	Enabled by cf$USE_GRAPPLE
	Optional user defined:
		#define grappleOnEnd()
		#define grappleOnStart()
		#define grappleOnFail() float grappleOnFail() // Returns how long it should take before unsitting the player
		#define grappleOnPermissions()					// When run time permissions are received
		#define grappleOnButton( int success )    		// When using a classic QTE and user presses a button
	
	Built in:
		key GRAPPLE_TARG						// Holds the grapple target
		function grappleStart( key id, int fxflags ) 		// Starts the grapple 
		function grappleEnd()					// Stops any active grapple
		integer grappleClosestConal( float arc, float range, int fxflags )		// Tries to grapple the closest player within arc and range
	
	#define body // put into default

	Globals:
	PLAYERS | list | List of player UUIDs
	PLAYER_HUDS | list | List of player HUDs corresponding to above players
	TEAM | int | Player team
	SPELLS | list | List of spells
	AGGRO | key | Currently aggroed player
	P_FX | int | (Optional) Searches for a prim named "FX" and maps that to global P_FX. Requires #define FX_PRIM

*/

// timerEvent was renamed timerEvt in the template. This warns for any legacy scripts
#ifdef timerEvent
	#error "Use #define timerEvt instead of timerEvent"
#endif

// Setup defaults
#ifndef cf$FLAGS
	#define cf$FLAGS 0
#endif
#ifndef cf$SPEED
	#define cf$SPEED 1
#endif
#ifndef cf$HITBOX
	#define cf$HITBOX 0
#endif
#ifndef cf$ATKSPEED
	#define cf$ATKSPEED 2
#endif
#ifndef cf$DMG
	#define cf$DMG 4
#endif
#ifndef cf$WANDER
	#define cf$WANDER 0
#endif
#ifndef cf$HP
	#define cf$HP 100
#endif
#ifndef cf$AGGRO_RANGE
	#define cf$AGGRO_RANGE 15
#endif
#ifndef cf$SOUND_AGGRO
	#define cf$SOUND_AGGRO ""
#endif
#ifndef cf$SOUND_AGGRO_LOST
	#define cf$SOUND_AGGRO_LOST ""
#endif
#ifndef cf$SOUND_TAKEHIT
	#define cf$SOUND_TAKEHIT ""
#endif
#ifndef cf$SOUND_ATTACK
	#define cf$SOUND_ATTACK ""
#endif
#ifndef cf$SOUND_DEATH
	#define cf$SOUND_DEATH ""
#endif
#ifndef cf$ICON
	#define cf$ICON ""
#endif
#ifndef cf$SCENE_ALIAS
	#define cf$SCENE_ALIAS ""
#endif
#ifndef cf$DROPS
	#define cf$DROPS ""
#endif
#ifndef cf$TEAM
	#define cf$TEAM 0
#endif
#ifndef cf$RANGE_ADD
	#define cf$RANGE_ADD 0
#endif
#ifndef cf$HEIGHT_ADD
	#define cf$HEIGHT_ADD 0
#endif
#ifndef cf$MELEE_HEIGHT
	#define cf$MELEE_HEIGHT -1
#endif
#ifndef cf$HOVER_HEIGHT
	#define cf$HOVER_HEIGHT 0
#endif
#ifndef cf$APTITUDE
	#define cf$APTITUDE 3.0
#endif
#ifndef cf$SEX
	#define cf$SEX 0
#endif
#ifndef cf$GRAPPLE_FLAGS
	#define cf$GRAPPLE_FLAGS (Evts$qFlags$LR|Evts$qFlags$LR_CAN_FAIL)
#endif
#ifndef cf$GRAPPLE_DURATION
	#define cf$GRAPPLE_DURATION 60
#endif
#ifndef cf$GRAPPLE_STAGES
	#define cf$GRAPPLE_STAGES 30
#endif
#ifndef cf$GRAPPLE_PREDELAY
	#define cf$GRAPPLE_PREDELAY 0
#endif
#ifndef cf$GRAPPLE_BUTTON_DELAY
	#define cf$GRAPPLE_BUTTON_DELAY 0
#endif
#ifndef cf$GRAPPLE_MONSTERFLAGS
	#define cf$GRAPPLE_MONSTERFLAGS \
		Monster$RF_IMMOBILE|\
		Monster$RF_PACIFIED|\
		Monster$RF_NOROT|\
		Monster$RF_NO_SPELLS|\
		Monster$RF_NOAGGRO
#endif


#ifdef cf$USE_GRAPPLE
	key GRAPPLE_TARG;
	
	grappleEnd(){
	
		#ifdef grappleOnEnd
			grappleOnEnd();
		#endif
		
		
		if( GRAPPLE_TARG ){
			
			int sitting = llAvatarOnSitTarget() == GRAPPLE_TARG;
			
			raiseEvent(LocalConfEvt$grappleEnd, GRAPPLE_TARG);
			
			fxlib$removeMySpellByName(GRAPPLE_TARG, "_Q");
			
			debugUncommon("Still sitting: "+(str)sitting);
			
			if( sitting )
				Evts$stopQuicktimeEvent(GRAPPLE_TARG);
			
			if( llAvatarOnSitTarget() )
				llUnSit(llAvatarOnSitTarget());
			
		}
		
		GRAPPLE_TARG = "";
		Monster$unsetFlags(cf$GRAPPLE_MONSTERFLAGS);
		
		llStopSound();
		multiTimer(["_g_fail"]);
		
	}
	
	grappleStart( key hud, integer fxFlags ){
		
		GRAPPLE_TARG = hud;
		Monster$setFlags(cf$GRAPPLE_MONSTERFLAGS);
		multiTimer(["_g_fail", 0, 3, FALSE]);
		FX$send(
			hud, 
			llGetKey(), 
			"[9,0,0,0,["+
				(str)cf$GRAPPLE_DURATION+","+(str)(PF_DETRIMENTAL|PF_NO_DISPEL)+",\"_Q\",["+
					mkarr((list)fx$SET_FLAG + (fx$F_QUICKRAPE|fxFlags))+","+
					mkarr((list)fx$FORCE_SIT+llGetKey()+1)+
				"]"+
			"]]", 
			TEAM_NPC
		);
		raiseEvent(LocalConfEvt$grappleStart, (str)hud);
		#ifdef grappleOnStart
		grappleOnStart();
		#endif
		
	}
	
	int grappleClosestConal( float arc, float range, int grappleFlags ){
	
		vector pos = llGetPos();
        list huds = [];
        runOnHUDs(hud,
            
            vector p = prPos(hud);
            p.z = 0;
            huds += (list)llVecDist(<pos.x, pos.y, 0>, p) + hud;
            
        )
        huds = llListSort(huds, 2, TRUE);
        
        integer i;
        for(; i<count(huds); i += 2 ){
            key targ = l2k(huds, i+1);
            
            key player = llGetOwnerKey(targ);
            vector ppos = prPos(player);
			
            list ray = llCastRay(pos+<0,0,.5>, ppos, RC_DEFAULT);
            prAngX(player, ang)
            float dist = l2f(huds, i);
            if( (llFabs(ang) < arc || dist < .5 ) && dist < range && !l2i(ray, -1) ){
                
                parseDesc(targ, resources, status, fx, sex, team, monsterflags, armor, _a)
                if( _attackableV(status, fx) ){
                    
					grappleStart(targ, grappleFlags);
                    return TRUE;
					
                }
                
            }
        
        }
		
		return FALSE;
	
	}
	
	
#endif


int BFL;
integer TEAM;
list SPELLS = [];
int DEAD;
key AGGRO;
#ifdef FX_PRIM
	int P_FX;
#endif
int LIVE;

ini( int live ){

	stopAllObjectAnimations()
	llStopSound();
    integer i;
    for(; i<llGetInventoryNumber(INVENTORY_ANIMATION); ++i){
        string n = llGetInventoryName(INVENTORY_ANIMATION, i);
        if( startsWith(n, "idle") ){
            llStartObjectAnimation(n);
		}
        else
            llStopObjectAnimation(n);
    }

	LIVE = portalConf$live;
	#ifdef onInit
		onInit(LIVE && live);
	#endif

}

Portal$playerLists
onEvt(string script, integer evt, list data){
	
	#ifdef onEvent
		onEvent( script, evt, data );
	#endif

	Portal$handlePlayers();
    
    if(script == "got Portal" && evt == evt$SCRIPT_INIT){

        ini(TRUE);
        NPCSpells$setSpells(SPELLS);

    }

    else if(script == "got Status" && evt == StatusEvt$team)
        TEAM = l2i(data, 0);

    else if( script == "got Status" && evt == StatusEvt$monster_gotTarget ){

		key pre = AGGRO;
        AGGRO = l2s(data, 0);
		
		if( AGGRO != pre ){
			
			// Optional combat stance
			if( llGetInventoryType("combat") == INVENTORY_ANIMATION ){
				if( AGGRO )
					llStartObjectAnimation("combat");
				else
					llStopObjectAnimation("combat");
			}
			#ifdef onAggroChange
				onAggroChange( pre, AGGRO );
			#endif
		}
		
		
	}
	
	
    
    else if( script == "got Status" && evt == StatusEvt$dead ){
		DEAD = l2i(data, 0);
		if( !DEAD )
			return;
		#ifdef onDeath
			onDeath();
		#endif
		#ifdef cf$USE_GRAPPLE
			grappleEnd();
		#endif
	}
	

	else if( script == "got NPCSpells" ){

		#ifdef onSpellStart
        if( evt == NPCSpellsEvt$SPELL_CAST_START )
            onSpellStart(l2s(data, 3), l2s(data, 2));
		#endif
        #ifdef onSpellFinish
		if( evt == NPCSpellsEvt$SPELL_CAST_FINISH )
            onSpellFinish(l2s(data, 3), l2s(data, 2));
		#endif
		#ifdef onSpellInterrupt
        if( evt == NPCSpellsEvt$SPELL_CAST_INTERRUPT )
            onSpellInterrupt(l2s(data, 3), l2s(data, 2));
		#endif
    }

	#ifdef afterEvent
	afterEvent(script, evt, data);
	#endif

}

timerEvent( string id, string data ){
	
	#ifdef cf$USE_GRAPPLE
	if( id == "_g_fail" || id == "_g_end" )
        grappleEnd();
	#endif

	#ifdef timerEvt
	timerEvt(id, data);
	#endif
	
}


default{
    on_rez(integer mew){llResetScript();}
    state_entry(){

        PLAYERS = [(string)llGetOwner()];
        memLim(1.5);
		#ifdef onSpellSetup
		onSpellSetup();
		#endif
		#ifdef FX_PRIM
		links_each(nr, name,
			if( name == "FX" )
				P_FX = nr;
		)
		#endif
		
		
		ini(FALSE);
    }

    timer(){ multiTimer([]); }
	
	// Grapple anim handler
	#ifdef cf$USE_GRAPPLE
	changed( integer change ){ 
		if( change & CHANGED_LINK ){ 
			
			key sitTarg = llAvatarOnSitTarget();
			if( sitTarg ){
				
				#ifdef cf$sitCheck
				if( cf$sitCheck(sitTarg) ){
				#else
				if( (sitTarg == llGetOwnerKey(GRAPPLE_TARG) || !LIVE) && !DEAD ){
				#endif
					multiTimer(["_g_fail"]);
					llRequestPermissions(sitTarg, PERMISSION_TRIGGER_ANIMATION); 
					
				}
				else
					llUnSit(sitTarg);
				
			}else if( GRAPPLE_TARG )
				grappleEnd();
			
			
		}
	}
	run_time_permissions( integer perm ){
		if( perm & PERMISSION_TRIGGER_ANIMATION ){
			
			#ifndef cf$DUMMY_MODE
			Evt$startQuicktimeEvent(GRAPPLE_TARG, cf$GRAPPLE_STAGES, cf$GRAPPLE_PREDELAY, "QTE", cf$GRAPPLE_BUTTON_DELAY, cf$GRAPPLE_FLAGS);
			#endif
			#ifdef grappleOnPermissions
			grappleOnPermissions();
			#endif
			
		}
	}
	#endif
		
	#ifdef body
	body
	#endif

    #include "xobj_core/_LM.lsl"
    if(method$isCallback){
		#ifdef onCallback
			onCallback(SENDER_SCRIPT, METHOD, PARAMS, CB, id);
		#endif
		#ifdef cf$USE_GRAPPLE
			// Quicktime event callback
			if( CB == "QTE" ){
			
				integer type = l2i(PARAMS, 0);
				integer success = l2i(PARAMS, 1);
				
				if( type == EvtsEvt$QTE$END ){
					
					if( success ){
						
						#ifdef grappleOnSuccess
							grappleOnSuccess();
						#endif
						raiseEvent(LocalConfEvt$grappleSuccess, (str)GRAPPLE_TARG);
						grappleEnd();
						
					}
					else{
						
						float t = 0.01;
						#ifdef grappleOnFail
						t = grappleOnFail();
						#endif
						raiseEvent(LocalConfEvt$grappleFail, (str)GRAPPLE_TARG);
						multiTimer(["_g_end", 0, t, FALSE]);
						
					}

				}
				#ifdef grappleOnButton
				else if( type == EvtsEvt$QTE$BUTTON ){
					grappleOnButton(success);
				}
				#endif
				
			}
		#endif
        return;
	}

    if(method$internal){
		#ifdef onInternalMethod
			CB_DATA = onInternalMethod( SENDER_SCRIPT, METHOD, PARAMS, id );
		#endif
        if(METHOD == LocalConfMethod$ini){
			list INI_DATA = [
				cf$FLAGS,
				cf$SPEED,
				cf$HITBOX,
				cf$ATKSPEED,
				cf$DMG,
				cf$WANDER,
				cf$HP,
				cf$AGGRO_RANGE,
				cf$SOUND_AGGRO,
				cf$SOUND_AGGRO_LOST,
				cf$SOUND_TAKEHIT,
				cf$SOUND_ATTACK,
				cf$SOUND_DEATH,
				cf$ICON,
				cf$SCENE_ALIAS,
				cf$DROPS,
				cf$TEAM,
				cf$RANGE_ADD,
				cf$HEIGHT_ADD,
				cf$MELEE_HEIGHT,
				cf$HOVER_HEIGHT,
				cf$APTITUDE,
				cf$SEX
			];
            raiseEvent(LocalConfEvt$iniData, mkarr(INI_DATA));
		}
		
		#ifdef onCheckCastSpell
		if( METHOD == LocalConfMethod$checkCastSpell )
			CB_DATA = (list)onCheckCastSpell( method_arg(1), method_arg(2) );
		#endif
		
    }
	
	
	#ifdef cf$USE_GRAPPLE
	if( METHOD == LocalConfMethod$grapple ){
		grappleStart(method_arg(0), (int)method_arg(1));
	}
	
	#endif

	#ifdef onMethod
		onMethod( SENDER_SCRIPT, METHOD, PARAMS, id );
	#endif

    #define LM_BOTTOM
    #include "xobj_core/_LM.lsl"
}
