/*
relies on the following functions and definitions


	#include "xobj_core/libraries/libJasPre.lsl"
	
	#define LOOP_SOUND "12869766-b7d1-21ee-b773-447b2b11ae1f"
	#define LOOP_VOLUME 0.5
	#define IMPACT_SOUNDS (list)"e05be787-dadb-dd29-0846-1c9f9e8143ea"+1	// uuid, volume
	#define USE_HITFX
	#define HITFX_FLAGS 0
	#define ON_LOAD

	// loop particles
	ini(){} 
	
	// Impact particles
	boom(){}
	
	// Optional defines:
	//#define timerEvt(id, data) timerEvt(id, data)
	//#define NO_DEATH
	
	#include "got/classes/packages/got Projectile.template"
	
	description:
	0 = ARC
	1 = flags (not yet used)
	2 = speed
	3 = wiggleIntensity
	4 = height offset
	
	spawn using:
	Projectile$quickSpawn(obj, targ, startpos, startrot)
	
*/
#include "got/_core.lsl"

#ifndef HITFX_FLAGS
	#define HITFX_FLAGS 0
#endif

#define DeathDebug( text )
//#define DISREGARD_START_POS
//#define INVERSE		// Animates from end to start

integer FLAGS;
key TARGET;
float MAX_DIST;
float SPEED;
float WIGGLE_POW = 0.5;
float WIGGLE_ANGLE;
float ARC = 0;
int SCAN;
float HEIGHT_OFFSET;



fire(){
    
    ini();
	#ifdef LOOP_SOUND
    llLoopSound(LOOP_SOUND, LOOP_VOLUME);
	#endif
    if( !(integer)llGetObjectDesc() && !(integer)jVal(llGetObjectDesc(), [0]) ){
        multiTimer(["FAIL", "", 10, FALSE]);
        multiTimer(["STEP", "", .25, FALSE]);
        vector vrot = llRot2Euler(prRot(llGetOwner()));
    }
	
	if(!(integer)llGetObjectDesc() && !(integer)jVal(llGetObjectDesc(), [ProjectileDesc$preventDefault])){
	
        multiTimer(["FAIL", "", 10, FALSE]);
        multiTimer(["STEP", "", .1, TRUE]);
		
		list data = llJson2List(llGetObjectDesc());
        FLAGS = l2i(data, ProjectileDesc$flags);
		SPEED = l2f(data, ProjectileDesc$speed);
		WIGGLE_POW = l2f(data, ProjectileDesc$wiggleIntensity);
		HEIGHT_OFFSET = l2f(data, ProjectileDesc$heightOffset);
		ARC = l2f(data, ProjectileDesc$arc);

		if(SPEED <= 0)
			SPEED = 1;
		else if(SPEED <= 0.1)
			SPEED = 0.1;

        STEP();
		
    }else 
		multiTimer(["FAIL"]);
	
    
}




vector endPos( key targ ){

	vector out = prPos(targ);
	boundsHeight(targ, b)
	if( llGetAgentSize(targ) ){
		vector v = llGetAgentSize(targ);
		b = v.z;
	}
	else
		out += <0,0,b/2>;
	return out+<0,0,HEIGHT_OFFSET*b>;
	
}

float motion_time( float mt){
    mt = llRound(45.0*mt)/45.0;
    if ( mt > 0.11111111 ) return mt;
    else return 0.11111111;
}

vector czBezier(float seg, vector start, vector handle1, vector handle2, vector end){
    float u = 1-seg;
    float sseg = seg*seg;
    float uu = u*u;
    return ((uu*u)*start)+(3*uu*seg*handle1)+(3*u*sseg*handle2)+((sseg*seg)*end);
}

STEP(){
    
    vector to = endPos(TARGET);	
	vector gpos = llGetRootPosition();
	float dist = llVecDist(gpos, to);
	
	if(MAX_DIST == 0){
		MAX_DIST = dist;
		WIGGLE_POW = (llFrand(WIGGLE_POW)-WIGGLE_POW/2)+WIGGLE_POW;
		WIGGLE_ANGLE = llFrand(TWO_PI);
	}
	
    if(to == ZERO_VECTOR){
	
		DeathDebug("Dying because target lost");
		llDie();
		
	}
	
    if( dist < .3 ){
	
        llSetLinkAlpha(LINK_SET, 0, ALL_SIDES);
		boom();
		llStopSound();
		
		#ifdef IMPACT_SOUNDS
		list sounds = IMPACT_SOUNDS;
		int i;
		for(; i<count(sounds); i+= 2 )
			llTriggerSound(l2s(sounds, i), l2f(sounds, i+1));
		#endif
			
		#ifdef USE_HITFX
		if( l2i(llGetObjectDetails(TARGET, (list)OBJECT_ATTACHED_POINT), 0) || llGetAgentSize(TARGET) != ZERO_VECTOR )
			fxlib$hitFX(TARGET, "<-1,-1,-1>", HITFX_FLAGS);
        else
			NPCInt$hitfx(TARGET);
		#endif
		llSetKeyframedMotion([], [KFM_COMMAND, KFM_CMD_STOP]);
		#ifndef NO_DEATH
        llSleep(2);
        llDie();
		llSleep(2);
		#endif
		
    }
    
	
	vector basepos = llVecNorm(to-llGetRootPosition());
	
	vector add;
	if( WIGGLE_POW ){
		float z = llSin((dist*2/MAX_DIST)*PI+PI_BY_TWO)*(dist/MAX_DIST);
		rotation r = llRotBetween(<1,.0,.0>, basepos);
		rotation angle = llEuler2Rot(<WIGGLE_ANGLE, 0, 0>);
		add += <0,0,z*WIGGLE_POW>*angle*r;
	}
	
	if( ARC != 0 ){
		
		float d = llVecDist(<to.x, to.y, 0>, <gpos.x, gpos.y, 0>)/MAX_DIST;
		/*
		if( d > 1 )
			d = 1;
		/*
		float x = d/MAX_DIST;	// Goes from 1 to 0	
		float ARC = llSin(PI*llPow(x,2))*ARC;
		add += <0,0,ARC*dist>;
		*/
		float dd = d;
		if( dd > 1 )
			dd = 1;
		add.z += d*ARC*(llSin(PI*(1.0-dd)/2+PI)+1);
		
	}
	
    if(dist>3)dist=3;
    
    vector pos = basepos+add;
    rotation rot = llRotBetween(<1,.0,.0>, pos)/llGetRot();
	
    pos*=dist*SPEED;
	float t = .3*(dist/3);
	
	if(t == 0){
		DeathDebug("Dying because T constant too low");
		return llDie();
	}
		
	// Die if velocity is too great, prevents a script error
	if(llVecMag(pos)/t > 200){
		DeathDebug("Dying because velocity is too high");
		return llDie();
	}
	
    llSetKeyframedMotion([pos, rot, motion_time(t)], []);
	
	
}

timerEvent(string id, string data){
	
	#ifdef timerEvt
		timerEvt(id, data);
	#endif

    if(id == "FAIL"){
		DeathDebug("Dying because of death timer");
		llDie();
	}
    else if(id == "STEP"){
        STEP();
    }
}




default{
    
    on_rez( integer total ){
        SCAN = total;
        if( total != 0 ){            
            llSensor("", "", ACTIVE|AGENT, 15, PI);
            llSetLinkPrimitiveParamsFast(LINK_THIS, [
                PRIM_TEMP_ON_REZ, TRUE,
                PRIM_PHANTOM, TRUE
            ]);
        }
    }
    
    state_entry(){
	
        llSetLinkPrimitiveParamsFast(LINK_THIS, [PRIM_POINT_LIGHT, FALSE, <1.000, 0.980, 0.502>, 1,3,2]);
        llStopSound();
        //llLoopSound("12869766-b7d1-21ee-b773-447b2b11ae1f", .3);
        memLim(1.5);
        llLinkParticleSystem(LINK_SET, []);
		#ifdef ON_LOAD
			ON_LOAD
		#endif

    }
    
    timer(){multiTimer([]);}
    
    sensor( integer total ){
        
        integer i;
        for( ; i<total; ++i){
            key k = llDetectedKey(i);
            integer t = (int)("0x"+llGetSubString(k, 0, 7));
            if( t == SCAN ){
			
			    TARGET = k;
					
				#ifdef INVERSE
					llSetRegionPos(endPos(TARGET));
					TARGET = mySpawner();
					if( prAttachPoint(TARGET) )
						TARGET = llGetOwnerKey(TARGET);
				#endif
				
                fire();
                return;
            }
        }
        
        if( llGetStartParameter() ){
			DeathDebug("dying because of sensor");
            llDie();
		}
        
    }

}
